# temporary module used to test how functions resolve their return types and handle local pointers

def f(x int32) # Should be int32 -> void

def f0() # Should be void -> void

def f1(x int32) int32 #Should be int32 -> int32

def f2(x int32) int32,int32 #Should be int32 -> int32,int32

def f3(x (int32,int32)) int32,int32 #Should be (int32,int32) -> int32,int32

def f4(x (int32,int32),y (int32,int32)) int32,int32 #Should be (int32,int32),(int32,int32) -> int32,int32

def f10() = 2 # Should be void -> int32

def f11(){
	return 2,3
} # Should be void -> int32,int32

def f12(){
	return
} # Should be void -> void

def f13(){
	var x = 3
} # Should be void -> void !


var pointer *int32

def f20(){
	var x = 2
	var y = &x
	pointer = y # Should be an error!
} # void -> void

def f21(){
	var x = 3
	var y = &x
	y = pointer # Should be ok!
} # void -> void

def f22() *int32 {
	var x = 4
	return &x # Should be an error!
}

def f23(){
	var x = 5
	return &x # NB this should be an error! Don't allow to infer a return type with local semantic!
}

def f40(x int32){
  var z Foo
  return z
}
def f41(x int32) Foo {
	var z Foo
	return z
}
f40(4)
f41(2)
type Foo { var x int32 }

# Record subtyping argument passing check
type Foo1 { extends var x int32 }
type Foo2 { extends var x Foo1 }
var fooInstance Foo1
def bar(x int32) = 1
var integer int32
bar(integer) # ok
bar(fooInstance) # ok
var foo2Instance Foo2
bar(foo2Instance) #ok

def bar(x *int32) = 2

bar(&integer) # ok
bar(&fooInstance) # ok
bar(&foo2Instance) # ok


def f30(x *int32) = 2
def f31(x *int32) {
	*x = 2 # TODO
}
def f32(x *int32){
	pointer = x
}
def f33(x *int32) = x

def f39(){
	var x int32
	f30(&x) # Should be ok
	f31(&x) # Should be ok
	f32(&x) # TODO Should fail!
	f33(&x) # Should be ok!
}
