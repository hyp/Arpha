
macro f0 = parser.parse()
f0 1

macro f1 = [> 3 <]
f1

macro f2 {
	var x = parser.parse()
	return x
}
f2 1

macro f3 {
	var x = parser.parse()
	return [> $x <]
}
f3 2

macro f4 {
	var x = parser.parse()
	return [> $x,2 <]
}
f4 1

macro f5 = parser.parse(50)
f5 1

macro f6 = [> 1 <]
macro f7 = [> f6 <]

f7

macro f8 = parser.parse()
macro f9 = [> f8 2 <]

f9

macro f11 = parser.parse()
macro f12 {
  var x = [> f11 2 <]
  var y = parser.parse()
  return [> $y,$x <]
}

f12 1

macro f13 {
	parser.expect("foo")
	return [> 1 <]
}
f13 foo

macro f14 {
	parser.expect("foo")
	return parser.parse()
}
f14 foo 1

macro f15 {
	while(parser.match("a")) ()
	parser.expect("b")
	return [> "f15 success" <]
}
f15 b
f15 a b
f15 a a a a b

macro f20 {
	parser.match("ha")
	return [> 1 <]
}
f20
f20 ha

macro f21 {
	return match(parser.match("Ha")) {
		to(true)  [> 1 <]
		to(false) [> 2 <]
	}
}
f21
f21 Ha

macro (x) ^ [precedence:40] {
	return [> $x <]
}
1 ^

macro (x) ~ [precedence:50] {
	var y = parser.parse(50)
	return [> $y,$x <]
}

1 ~ 2
1 ~ 2 ~ 3

macro f30 {
	parser.symbol()
	return [> 1 <]
}
f30 a

macro f40 {
	parser.matchNewline()
	return parser.parse()
}
f40 1
f40
	2
	
macro f100(x int32) = [> 1,$x <]
f100(2)

macro quasi0 {
	var x = parser.parse()
	return [> x <]
}
macro quasi1 {
	var x = parser.parse()
	return [> $x <]
}
type x {
	var z int32
}
quasi0 1 #type x
quasi1 1 #1

#loops
macro loop0 {
   parser.expect("{")
   parser.loop("}",";",def f(){ parser.expect("a") })
   return [> "loop0success!" <]
}
loop0 { a }
loop0 { a; }
loop0 { a;a;a }
loop0 {
	a
	a
}

macro loop1 {
   parser.loop("end",";",def f(){ parser.parse() })
   return [> "loop1success!" <]
}
loop1 1 end
loop1 1;2 end
loop1
	1
	2
end

