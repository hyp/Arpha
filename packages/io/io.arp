# TODO
import cstdlib

def print  (number int32)
{
	if(number < 0){
		putchar('-')
		number = -number
	}
	var buffer Array(char8,16)
	var i natural = 0
	loop {
		buffer[i] = ('0' + number % 10) as char8
		i++
		number/=10
	} until(number == 0)
	loop {
		i--
		putchar(buffer[i] as int32)
	} until(i==0)
}

def print  (string Range(char8))
{
	until(string.empty){
		if(string.current == '\n') putchar('\r')
		putchar( string.current as int32 )
		string.moveNext()
	}
}

#
macro print(parameters..)
{
	return [> for(i in $parameters) print(i) <]
}
#

macro println(parameters..)
{
	return [> 
		match(typeof($parameters))
		{|Tuple => for(i in $parameters) print(i)
		 |_ 	=> print($parameters)
		}
		print("\n")
	<]
}

def Bytes = LinearSequence (uint8)

#
	Buffer based I/O:
#
type BufferedWriter {
	var buffer  Bytes
	var flusher FunctionPointer(*BufferedWriter,Nothing)
}

where self is *BufferedWriter, bytes is Bytes, string is LinearSequence(char8):

var overflowBuffer Array(uint8,64) # This array is a reserved space for buffer overflow

# TODO: buffer's length must be at least X bytes!
def init (self,bytes) {
	self.buffer  = bytes
	self.flusher = def dummyFlusher(self) {
		self.buffer = overflowBuffer 
	}
}
def flush(self) {
	def f = self.flusher
	f(self)
}
def write(self,bytes) {
	var bufLen  = self.buffer.length
	var byteLen = bytes.length
	
	if(byteLen > bufLen){
		memcpy(self.buffer,bytes,bufLen,advanceDestination: true,advanceSource: true)
		self.flush
		byteLen -= bufLen
		if(byteLen > self.buffer.length) {
			self.buffer= bytes
			self.flush
			return
		}
		fallthrough
	}
	else memcpy(self.buffer,bytes,byteLen,advanceDestination: true)
	return
}

# Writing binary data:

def write(self,number uint32) {
}
def write(self,number int32)     = self.write(number    as uint32)
def write(self,character char32) = self.write(character as uint32)


# Text formatting:
def print(self,string) {
	self.write(string as Bytes)
}
def print(self,character char32){
	#TODO:
}
def print(self,boolean bool) = if(boolean) self.print("true") else self.print("false")

macro formatIntegerMixin(number,radix,negative = false,bufSize = 64) = [>
	var buffer Array(uint8,$bufSize)
	var i natural = $bufSize
	loop {
		i--
		def n = $number % $radix
		if(n < 10) buffer[i] = ('0' + n) as uint8
		else buffer[i] = (55 + n) as uint8
		$number /= $radix
	} until(number == 0)
	var bytes Bytes = buffer
	bytes = bytes.slice(from: i)
	self.write(bytes)
<]

def print(self,number uint32,radix uint32,negative bool){
	formatIntegerMixin(number,radix,negative,32)
}
def print(self,number uint32) = self.print(number,radix: 10,negative: false)
def print(self,number  int32) {
	var lessThanZero = false
	if(number < 0){
		number = -number
		lessThanZero = true
	}
	self.print(number as uint32,radix: 10,negative: lessThanZero)
}

macro print  (self,parameters..){
	return [> for(i in $parameters) $self.print(i) <]
}
macro println(self,parameters..){
	return [>
		match(typeof($parameters))
		{|Tuple => for(i in $parameters) $self.print(i)
		 |_ 	=> $self.print($parameters)
		}
		$self.print('\n')
	<]
}

#
	File I/O:
#
type File {
	private var filePtr *Nothing
	
	def init(self,file *Nothing) = self.filePtr = file
	def destroy(self) {
		fclose(self.filePtr)
	}
	def write(self,bytes){
		fwrite(bytes as *uint8 as *Nothing,bytes.length,1,self.filePtr)
	}
	def read (self,bytes){
		fread(bytes as *uint8 as *Nothing,bytes.length,1,self.filePtr)
	}
}

#TODO File | Nothing
def open(filename LinearSequence(char8),mode LinearSequence(char8)){
	def ptr = fopen(filename.toStringz,mode.toStringz)
	return File(ptr)
}
def open(filename LinearSequence(char8),write bool,append = false,text = true){
	var mode
	if(!append) mode = if(!text) "wb" else "w"
	else mode = if(!text) "ab" else "a"
	return open(filename,mode: mode)
}

#
	A buffered output file stream.
#
type BufferedOutputStream {
	extends var super BufferedWriter
	var storage Array(uint8,32)
	var file *File
	
	def init(self) {
		self.super.init(self.storage)
		self.super.flusher = def flush(self *BufferedOutputStream) {
			def bufLength = self.buffer.length
			if(bufLength > self.storage.length) self.file.write(self.buffer)
			else {
				var st Bytes = self.storage
				st = st[0 .. self.storage.length - bufLength]
				self.file.write( st )
			}
			self.buffer = self.storage
		}
	}
}
