#
	This module defines arpha's operators.
	Author: Hyp
	Version: 1
	Note:
		Operator definitions are located in the order of increasing priority in this module.
		Operators '=' '.' ',' are defined by the compiler implementation.
#

import qualified precedence

# Prefix operators
macro - {
	var expr = parser.parse(precedence.unary)
	return [> minus($expr) <]
}

macro + {
	return parser.parse(precedence.unary)
}

macro ! {
	var expr = parser.parse(precedence.unary)
	return [> not($expr) <]
}

# Postfix operators
# Note that you can only use them as statements - *(ptr++) is illegal!
macro (x) ++ [precedence:precedence.increment] {
	return [> { $x = add($x,1)  } <]
}

macro (x) -- [precedence:precedence.increment] {
	return [> { $x = subtract($x,1) } <]
}

# Infix operators

## Cast
macro (expr) as [precedence:precedence.isas] {
	var type = parser.parse(precedence.isas)
	return ast.newCast(expr,type)
}


## Logical group
macro (x) and [precedence:precedence.logical] {
	var y = parser.parse(precedence.logical,ignoreNewlines:true)
	return [> and($x,$y) <]
}

macro (x) or [precedence:precedence.equality] {
	var y = parser.parse(precedence.logical,ignoreNewlines:true)
	return [> or($x,$y) <]
}

## Equality group
macro (x) == [precedence:precedence.equality] {
	var y = parser.parse(precedence.equality,ignoreNewlines:true)
	return [> equals($x,$y) <]
}

macro (x) != [precedence:precedence.equality] {
	var y = parser.parse(precedence.equality,ignoreNewlines:true)
	return [> notEquals($x,$y) <]
}

## Comparison group
macro (x) < [precedence:precedence.comparison] {
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> less($x,$y) <]
}

macro (x) > [precedence:precedence.comparison] {
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> greater($x,$y) <]
}

macro (x) <= [precedence:precedence.comparison] {
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> lessEquals($x,$y) <]
}

macro (x) >= [precedence:precedence.comparison] {
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> greaterEquals($x,$y) <]
}

## Term group
macro (x) + [precedence:precedence.term] {
	var y = parser.parse(precedence.term,ignoreNewlines:true)
	return [> add($x,$y) <]
}

macro (x) - [precedence:precedence.term] {
	var y = parser.parse(precedence.term,ignoreNewlines:true)
	return [> subtract($x,$y) <]
}

## Product group
macro (x) * [precedence:precedence.product] {
	var y = parser.parse(precedence.product,ignoreNewlines:true)
	return [> multiply($x,$y) <]
}

macro (x) / [precedence:precedence.product] {
	var y = parser.parse(precedence.product,ignoreNewlines:true)
	return [> divide($x,$y) <]
}

macro (x) % [precedence:precedence.product] {
	var y = parser.parse(precedence.product,ignoreNewlines:true)
	return [> mod($x,$y) <]
}

## Index operator
macro (x) [ [precedence:precedence.index] {
	var arg = parser.parse()
	parser.expect("]");
	return [> $x.index($arg) <]
}


