#
	This module defines arpha's operators.
	Author: Hyp
	Version: 1
	Note:
		Operator definitions are located in the order of increasing priority in this module.
		Operators '=' '.' ',' are defined by the compiler implementation.
#

import qualified precedence

# Prefix operators
macro minus(x) syntax("-",precedence(precedence.unary) x) = minus(x)
macro plus(x) syntax("+",precedence(precedence.unary) x) = plus(x)
macro not(x) syntax("!",precedence(precedence.unary) x) = not(x)

# Infix operators

## Logical group
macro and(x,y) syntax(x,precedence(precedence.logical) "and",precedence(precedence.logical) y) = and(x,y)
macro or(x,y) syntax(x,precedence(precedence.logical) "or",precedence(precedence.logical) y) = or(x,y)

## Equality group
macro equals(x,y) syntax(x,precedence(precedence.equality) "==",precedence(precedence.equality) y) = equals(x,y)
macro notEquals(x,y) syntax(x,precedence(precedence.equality) "!=",precedence(precedence.equality) y) = notEquals(x,y)

## Comparison group
macro less(x,y) syntax(x,precedence(precedence.comparison) "<",precedence(precedence.comparison) y) = less(x,y)
macro greater(x,y) syntax(x,precedence(precedence.comparison) ">",precedence(precedence.comparison) y) = greater(x,y)
macro lessEquals(x,y) syntax(x,precedence(precedence.comparison) "<=",precedence(precedence.comparison) y) = lessEquals(x,y)
macro greaterEquals(x,y) syntax(x,precedence(precedence.comparison) ">=",precedence(precedence.comparison) y) = greaterEquals(x,y)

## Sum group
macro add(x,y) syntax(x,precedence(precedence.term) "+",precedence(precedence.term) y) = add(x,y)
macro subtract(x,y) syntax(x,precedence(precedence.term) "-",precedence(precedence.term) y) = subtract(x,y)

## Product group
macro multiply(x,y) syntax(x,precedence(precedence.product) "*",precedence(precedence.product) y) = multiply(x,y)
macro divide(x,y) syntax(x,precedence(precedence.product) "/",precedence(precedence.product) y) = divide(x,y)
macro mod(x,y) syntax(x,precedence(precedence.product) "%",precedence(precedence.product) y) = mod(x,y)

## Power
macro power(x,y) syntax(x,precedence(precedence.power) "**",precedence(precedence.power) y) = pow(x,y)

## Increments. Note that they don't return the incremented value unlike C/C++.
macro inc(x) syntax(x,precedence(precedence.increment) "++") { x = x + 1 }
macro dec(x) syntax(x,precedence(precedence.increment) "--") { x = x - 1 }
