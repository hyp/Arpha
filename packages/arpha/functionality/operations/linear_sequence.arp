#
	This module defines standart operations on linear sequences
	
	Linear sequence is a contiguos sequence of elements. It is represented by a structure containing two pointers to the beggining and to the end of the sequence.
#
import arpha.intrinsic

def length (self Pointer(LinearSequence(_))) natural

def element(self Pointer(LinearSequence(T: _)),i natural) Pointer(T)
def element(self Pointer(LinearSequence(T: _)),i natural,item Pointer(T))

#
TODO:
def slice(self LinearSequence(T: _),from natural)            LinearSequence(T)
def slice(self LinearSequence(T: _),to   natural)            LinearSequence(T)
def slice(self LinearSequence(T: _),from natural,to natural) LinearSequence(T)
#

# Range interface
def isEmpty (self Pointer(LinearSequence(_))) bool
macro current(self Pointer(LinearSequence(_))) = [> $self.element(0) <]
def moveNext(self Pointer(LinearSequence(_)))

