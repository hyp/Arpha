#
	This module contains the definitions for the Arpha AST API.
	Arpha AST API allows to perform compile-time AST manipulation.
	Author: Hyp
	Version: 1
#

import arpha.intrinsic

def Expression           Type

def returnType(expression *Expression) Type

# Returns true if a given expression is constant.
# Expression is constant if it is any Literal expression, a TypeReference or a Tuple containing the above expressions.
def isConst   (expression *Expression) bool

# Returns the location of the expression in the source file.
def location  (expression *Expression) line: natural,column: natural 

# The types below are derived from Expression
def IntegerLiteral       Type
def FloatingPointLiteral Type
def BoolLiteral          Type
def StringLiteral        Type
def TypeReference        Type
def Unit                 Type
def Tuple                Type
def VariableReference    Type
def PointerOperation     Type
def FieldAccess          Type
def Call                 Type
def LogicalOperation     Type
def Cast                 Type
def Assignment           Type
def IfElse               Type
def ControlFlow          Type
def Loop                 Type
def Return               Type
def Block                Type
def UnresolvedSymbol     Type

#def Variable             Type

def newTypeReference(type Type) *TypeReference
def newLoop(body *Expression) *Loop
def newReturn(expression *Expression) *Return
def newIfElse(condition *Expression,consequence *Expression,alternative *Expression) *IfElse
def newControlFlow(continue bool)    *ControlFlow
def newControlFlow(break bool)       *ControlFlow
def newControlFlow(fallthrough bool) *ControlFlow
def newPointerOperation(expression *Expression,addressof bool)   *PointerOperation
def newPointerOperation(expression *Expression,dereference bool) *PointerOperation
def newLogicalOperation(a *Expression,b *Expression,and bool) *LogicalOperation
def newLogicalOperation(a *Expression,b *Expression,or bool) *LogicalOperation

def newCast(expression *Expression,type *Expression) *Cast
