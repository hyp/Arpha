#
	This module defines arpha's core types.
	Author: Hyp
	Version: 1
	TODO:
		max/min information in here.
#

import arpha.intrinsic

#
	Core types such as:
		Nothing, Type and bool,
	are defined by the implementation.
	The constant values true and false are also defined by the implementation.
#



import export core.type_qualifiers

# Represents a tuple
type Tuple(Types..)
{
}

#
	This concept descibes a type which can be used as a condition for the 'if' expression.
	TODO: make bool match it.
#
concept(implicit) Conditional
{
	def isTrue(self) bool
}

#
	This type represents a pointer to a function.
#
type FunctionPointer(ParameterType,ReturnType)
{
}

#
	This trait describes a type which can be iterated in a sequential fashion.
#
concept Range(T) 
{
	def empty   (self) bool
	def current (self) T
	def moveNext(self *Range) Nothing
}

concept InfiniteRange(T)
{
	def current (self) T
	def moveNext(self *InfiniteRange) Nothing
}

concept OutputRange(T)
{
	def put(self,item T) Nothing
}


#
	Contiguos sequence is a contiguos sequence of elements. 
	It is represented by a structure containing two pointers to the beggining and to the end of the sequence.
#
type LinearSequence(T) extends Range
{
}

type Array(T,N natural)
{
}

#
	Type operations.
	
	isParametrized returns true if a type is parametrize e.g. Pointer(int32) is parametrized by int32
#
def equals(type Type,other Type) bool
def isParametrized(type Type) bool
