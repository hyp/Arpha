#
	The vector type is a simple type that represents a vector of elements.
	It is used to perform parallel operations on primitive types such as integers and floats.
	It is equivalent to LLVM's vector type.
	
	Author:  Hyp
	Version: 1
#
import arpha.intrinsic

type Vector(ElementType,NumberOfElements natural) { }

where self is Vector(T: _,N: _), other is Vector(T,N):

def element(self,i natural) T

def add      (self,other) Vector(T,N)
def subtract (self,other) Vector(T,N)
def multiply (self,other) Vector(T,N)
def divide   (self,other) Vector(T,N)
def remainder(self,other) Vector(T,N)

def equals   (self,other) Vector(bool,N)
def less     (self,other) Vector(bool,N)
def greater  (self,other) Vector(bool,N)

#TODO
#def shuffle (x Vector(T: _,N: _),mask Vector(uint32,_)) Vector(T,N)
#def shuffle (x Vector(T: _,N: _),y Vector(T,_),mask Vector(uint32,_)) Vector(T,N)

