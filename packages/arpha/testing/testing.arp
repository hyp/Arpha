#
	This module provides various tests for testing the implementation of arpha's compiler.
	Author: Hyp
	Version: 1
	TODO:(Lates+1) compile & run
#

# Testing various functions


# Type equality and operator ==
assert( equals(int32,int32) )
assert(equals(int8,int8))
assert((equals(bool,bool)))
assert( int32 == int32 )
assert( (int32) == int32 )
assert( (int64) == ((int64)) )
assert( equals(compiler.Type,compiler.Type) )
assert( compiler.Type == compiler.Type )
assert( typeof(int32) == compiler.Type )
#
TODO
	assert( true == true )
	assert( false == false)
#

# Number literals default return types
assert( typeof(2) == int32 )
assert( typeof(3_000_000_000) == uint32 )
assert( typeof(5_000_000_000) == int64 )
assert( typeof(10_000_000_000_000_000_000) == uint64 )

# Conditionals
assert( if true then true else false )
assert( if false then false else true )
assert( if int32 == int32 then true else false )

# Variable definition with type inferring
var x uint8
assert( typeof(x) == uint8 )
#
TODO: make this pass
	var y = 2
	assert( typeof(y) == int32 )
#
var z
z = false
assert( typeof(z) == bool )
#
TODO: make this pass(need multiple resolving passes?)
	var t
	assert( typeof(t) == bool )
	t = true
#

import type

# '.' syntax
assert( uint16.typeof == compiler.Type )

# Assignment operator
assert( typeof( x = 2 ) == uint8 ) #It must return the type of rhs, not lhs!


#
assert( sizeof(int8) == sizeof(uint8) == 1 )
assert( sizeof(int16) == sizeof(uint16) == 2 )
assert( sizeof(int32) == sizeof(uint32) == 4 )
assert( sizeof(int64) == sizeof(uint64) == 8 )
assert( sizeof(2) == sizeof(typeof(2)) == sizeof(int32) )
#
