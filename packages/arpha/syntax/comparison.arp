#
	This module implements arpha's comparison operators.
	Author: Hyp
	Version: 1
#

import qualified precedence

constraint ImplementsEquals(T)  = true
constraint ImplementsGreater(T) = true
constraint ImplementsLess(T)    = true

macro notEquals     (x T:ImplementsEquals ,y T) = [> ! $x.equals ($y) <]
macro lessEquals    (x T:ImplementsGreater,y T) = [> ! $x.greater($y) <]
macro greaterEquals (x T:ImplementsLess   ,y T) = [> ! $x.less   ($y) <]

macro (x) ==  
uses precedence: precedence.equality
{
	var y = parser.parse(precedence.equality,ignoreNewlines:true)
	return [> $x.equals($y) <]
}

macro (x) !=
uses precedence: precedence.equality
{
	var y = parser.parse(precedence.equality,ignoreNewlines:true)
	return [> $x.notEquals($y) <]
}

macro (x) <
uses precedence: precedence.comparison  
{
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> $x.less($y) <]
}

macro (x) >
uses precedence: precedence.comparison  
{
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> $x.greater($y) <]
}

macro (x) <=  
uses precedence: precedence.comparison  
{
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> $x.lessEquals($y) <]
}

macro (x) >=
uses precedence: precedence.comparison  
{
	var y = parser.parse(precedence.comparison,ignoreNewlines:true)
	return [> $x.greaterEquals($y) <]
}

