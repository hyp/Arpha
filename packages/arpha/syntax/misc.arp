#
	This module implements miscellaneos operators
#
import qualified precedence

# Pointer adressing and dereference operators. Pointer Type.
macro & 
{
	var expr = parser.parse(precedence.unary)
	return ast.newPointerOperation(expr,addressof: true)
}

# Type casting
macro (expression) as
uses precedence: precedence.isas
{
	var type = parser.parse(precedence.isas)
	return [> as($expression,$type) <]
}

macro (expression) is
uses precedence: precedence.isas
{
	var something = parser.parse(precedence.isas)
	return [> is($expression,$something) <]
}

macro as(expression,T Type) = ast.newCast(expression,T)

macro []
{
	var next = parser.parse(precedence.unary)
	return [> LinearSequence($next) <]
}

# Indexing operator.
macro (sequence) [
uses precedence: precedence.index
{
	var i = parser.parse()
	if(parser.match("..")){
		if(parser.match("]")){
			return [> $sequence.slice(from: $i) <]
		}
		var e = parser.parse()
		return [> $sequence.slice(from: $i,to: $e) <]
	}
	parser.expect("]")
	return [> $sequence.element($i) <]
}

# Visibility modes
macro public
{
	if(parser.match(":")) return ast.newScopedCommand(public: true) 
	else return ast.newScopedCommand(public: true,parser.parse())
}

macro private
{
	if(parser.match(":")) return ast.newScopedCommand(private: true) 
	else return ast.newScopedCommand(private: true,parser.parse())
}
