#
	This module implements miscellaneos operators
#
import qualified precedence

# Pointer adressing and dereference operators. Pointer Type.
macro & 
{
	var expr = parser.parse(precedence.unary)
	return ast.newPointerOperation(expr,addressof: true)
}

macro * 
{
	var expr = parser.parse(precedence.unary)
	return [> derefOrPtrType($expr) <]
}
macro derefOrPtrType(T Type)                 = [> Pointer($T) <]
macro derefOrPtrType(expr Pointer(_))        = ast.newPointerOperation(expr,dereference: true)
macro derefOrPtrType(expr BoundedPointer(_)) = ast.newPointerOperation(expr,dereference: true) 

# Indexing operator.
use precedence: precedence.index
macro (sequence) [
{
	var i = parser.parse()
	if(parser.match("..")){
		var e = if(parser.match("]")) [> $sequence.length - 1 <] else parser.parse()
		return [> $sequence.slice($i,$e) <]
	}
	parser.expect("]")
	return [> $sequence.element($i) <]
}
