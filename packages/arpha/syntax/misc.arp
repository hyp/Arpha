#
	This module implements miscellaneos operators
#
import qualified precedence

# Pointer adressing and dereference operators. Pointer Type.
macro & 
{
	var expr = parser.parse(precedence.unary)
	return ast.newPointerOperation(expr,addressof: true)
}

macro * 
{
	var expr = parser.parse(precedence.unary)
	return [> derefOrPtrType($expr) <]
}
macro derefOrPtrType(T Type)                 = [> Pointer($T) <]
macro derefOrPtrType(expr Pointer(_))        = ast.newPointerOperation(expr,dereference: true)

# Type casting
use precedence: precedence.isas
macro (expression) as
{
	var type = parser.parse(precedence.isas)
	return [> as($expression,$type) <]
}

macro (expression) is
{
	var something = parser.parse(precedence.isas)
	return [> is($expression,$something) <]
}

macro as(expression,T Type) = ast.newCast(expression,T)

# Indexing operator.
use precedence: precedence.index
macro (sequence) [
{
	var i = parser.parse()
	if(parser.match("..")){
		if(parser.match("]")){
			return [> $sequence.slice(from: $i) <]
		}
		var e = parser.parse()
		return [> $sequence.slice(from: $i,to: $e) <]
	}
	parser.expect("]")
	return [> $sequence.element($i) <]
}
