#
	This module defines arpha's syntax.
	Author: Hyp
	Version: 1
#

import export types

import qualified precedence

import export ast

#TODO condition typecheck?
macro if {
	#must have if and else
	macro ifElse {
		parser.expect("(")
		var condition = parser.parse()
		parser.expect(")")
		var consequence = parser.parse()
		parser.expect("else")
		var alternative = parser.parse()
		return ast.newIfElse(condition,consequence,alternative)		
	}
	parser.expect("(")
	var condition = parser.parse()
	parser.expect(")")
	var consequence = parser.parse()
	var alternative = ifElse(parser.match("else")) parser.parse() else [> () <]
	return ast.newIfElse(condition,consequence,alternative)
}

#TODO condition typecheck?
macro while {
	parser.expect("(")
	var condition = parser.parse()
	parser.expect(")")
	return ast.newWhile(condition,parser.parse())
}

macro continue = ast.newControlFlow(continue:true)
macro break = ast.newControlFlow(break:true)

# TODO
macro for {
	parser.expect("(")
	var vname = parser.symbol()
	parser.expect("in")
	var container = parser.parse()
	parser.expect(")")
	var body = parser.parse()
	return [> while(false) $body <]
}

#TODO
macro [ {
	var expr = parser.parse()
	parser.expect("]")
	return [> $expr <]
}

macro & {
	var expr = parser.parse(precedence.unary)
	return ast.newPointerOp(expr,addressof:true)
}

macro * {
	var expr = parser.parse(precedence.unary)
	return [> derefOrPtrType($expr) <]
}
macro derefOrPtrType(T Type) = [> Pointer($T) <]
macro derefOrPtrType(expr)   = ast.newPointerOp(expr,dereference:true) 

macro [] {
	var expr = parser.parse(precedence.unary)
	return [> Range($expr) <]
}

import export operators

import export operations


macro new {
	var type = parser.parse(precedence.call)
	if(parser.match("(")){
		if(!parser.match(")")){
			var arg = parser.parse()
			parser.expect(")")
			return [> $type.allocator.alloc(sizeof($type)).construct($arg) <]
		}
	}
	return [> $type.allocator.alloc(sizeof($type)).construct() <]
}

macro delete {
	var object = parser.parse() #type check is ptr..
	return [> $object.finalize(); typeof($object).allocator.free($object) <]
}

# Returns true if two given types are the same type. TOCONSIDER move to compiler
def equals(x Type,y Type) bool



# An unsigned integer representing CPU's word.
# It is equivalent to size_t from C/C++.
#def natural = if(true) uint32 else uint64

#import export operators



#import export qualified compiler

#import export operations
