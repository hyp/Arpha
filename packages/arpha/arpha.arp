#
	This module defines arpha's syntax.
	Author: Hyp
	Version: 1
#

import export types

import export syntax.conditional
import export syntax.logical
import export syntax.loops
import export syntax.comparison
import export syntax.arithmetic
import export syntax.misc

import export functionality.bounded_pointer


macro & {
	var expr = parser.parse(60)
	return ast.newPointerOperation(expr,addressof: true)
}

#TODO fix this mess

#

#Array literal
macro [ {
	loop {
		parser.parse(precedence.tuple)
	} while(parser.match(","))
	parser.expect("]")
	return [> 1 <]
}

macro & {
	var expr = parser.parse(precedence.unary)
	return ast.newPointerOp(expr,addressof:true)
}

macro * {
	var expr = parser.parse(precedence.unary)
	return [> derefOrPtrType($expr) <]
}
macro derefOrPtrType(T Type) = [> Pointer($T) <]
macro derefOrPtrType(expr Pointer(_))   = ast.newPointerOp(expr,dereference:true) 

macro [] {
	var expr = parser.parse(precedence.unary)
	return [> Range($expr) <]
}


#

# A default heap allocator used to allocate objects with new
#constraint anyType(T) = T == Type
#macro allocator(T anyType) = [> <]

#
	New is used to create a new instance of an object not on the stack
	Note:
		In order to use custom memory allocator, you will have to implement
		a property "allocator" for your type. 

macro new {
	var type = parser.parse(precedence.call)
	if(parser.match("(")){
		if(!parser.match(")")){
			var arg = parser.parse()
			parser.expect(")")
			return [> $type.allocator.alloc(sizeof($type)).construct($arg) <]
		}
	}
	return [> $type.allocator.alloc(sizeof($type)).construct() <]
}


	Delete is used to delete an instance of an object which resides not on the stack
	Note:
		In order to use custom memory allocator, you will have to implement
		a property "allocator" for your type. 

macro delete {
	var object = parser.parse() #TODO type check is ptr..
	return [> $object.finalize(); typeof($object).allocator.free($object) <]
}
#


# An unsigned integer representing CPU's word.
# It is equivalent to size_t from C/C++.
#def natural = if(true) uint32 else uint64

#import export operators



#import export qualified compiler

#import export operations
