#
	Testing out implicit sequences..
#

concept(implicit) Seq(T) 
{
	def empty   (self) bool
	def current (self) T
	def moveNext(self *Seq) Nothing
}
type RandomGenerator 
{
	var x int32
	def empty   (self) = false
	def current (self) = self.x
	def moveNext(self) = self.x++
}
type ParametrizedRandomGenerator(T)
{
	var x T
	def empty   (self) = false
	def current (self) = self.x
	def moveNext(self) = self.x++
}
type RandomGeneratorExtender
{
	extends var super RandomGenerator
}
type ParametrizedRandomGeneratorExtender
{
	extends var super ParametrizedRandomGenerator(int32)
}
def main()
{
	match(RandomGenerator) 
	{ 	| Seq => true 
		| _   => false 
	}
	match(ParametrizedRandomGenerator(int32)) 
	{ 	| Seq => true 
		| _ => false
	}
	match(RandomGenerator)
	{	| Seq(int32) => true
		| _ => false
	}
	match(ParametrizedRandomGenerator(int32))
	{	| Seq(int32) => true
		| _ => false
	}
	match(RandomGeneratorExtender)
	{	| Seq => true
		| _ => false
	}
	match(ParametrizedRandomGeneratorExtender)
	{	| Seq => true
		| _ => false
	}	
}
